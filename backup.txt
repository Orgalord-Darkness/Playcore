nelmio_api_doc:
    documentation:
        servers:
          - url: http://api.example.com/unsafe
            description: API over HTTP
          - url: https://api.example.com/secured
            description: API over HTTPS
        info:
            title: My App
            description: This is an awesome app!
            version: 1.0.0
            x-build: #CommitHash
        components:
            securitySchemes:
                Bearer:
                    type: http
                    scheme: bearer
                    bearerFormat: JWT
        security:
            - Bearer: []


    #[OA\Response(
        response: 200,
        content: new OA\JsonContent(
            type: 'array',
            items: new OA\Items(ref: new Model(type: Editor::class))
        )
    )]

---------------------------------------------------------------------------------------------------------------- Ancien User

#[Route('/api/v1/users/pagination', methods: ['GET'])]
    #[OA\Response(
        response: 200,
        description: 'Returns list of users',
        content: new OA\JsonContent(
            type: 'array',
            items: new OA\Items(ref: new Model(type: User::class))
        )
    )]
    #[OA\Tag(name: 'Users')]
    #[Security(name: 'Bearer')]
    public function pagination(UserRepository $repository)
    {
        $users = $repository->findAllWithPagination(1, 10);

        return $this->json($users);
    }

    #[Route('/api/v1/users/list', methods: ['GET'])]
    #[OA\Response(
        response: 200,
        description: 'Returns list of users',
        content: new OA\JsonContent(
            type: 'array',
            items: new OA\Items(ref: new Model(type: User::class))
        )
    )]
    #[OA\Tag(name: 'Users')]
    #[Security(name: 'Bearer')]
    public function list(UserRepository $repository)
    {
        $users = $repository->findAllUsers();

        return $this->json($users);
    }

    #[Route('/api/v1/users/{id}', methods: ['GET'])]
    #[OA\Response(
        response: 200,
        description: 'Returns a single user by id',
        content: new Model(type: User::class)
    )]
    #[OA\Response(response: 404, description: 'User not found')]
    #[OA\Tag(name: 'Users')]
    #[Security(name: 'Bearer')]
    public function show(UserRepository $repository, int $id)
    {
        $user = $repository->findOneById($id);

        if (!$user) {
            return $this->json(['message' => 'User not found'], 404);
        }

        return $this->json($user);
    }

    #[Route('/api/v1/users', methods: ['POST'])]
    #[OA\RequestBody(
        description: 'User data for creating a new user',
        required: true,
        content: new OA\JsonContent(
            required: ['username', 'email', 'password'],
            properties: [
                new OA\Property(property: 'username', type: 'string'),
                new OA\Property(property: 'email', type: 'string'),
                new OA\Property(property: 'password', type: 'string'),
                new OA\Property(property: 'roles', type: 'array', items: new OA\Items(type: 'string'), nullable: true),
            ]
        )
    )]
    #[OA\Response(response: 201, description: 'User created')]
    #[OA\Response(response: 400, description: 'Invalid input')]
    #[OA\Tag(name: 'Users')]
    #[Security(name: 'Bearer')]
    public function create(Request $request, UserRepository $repository, UserPasswordHasherInterface $passwordHasher)
    {
        $data = json_decode($request->getContent(), true);

        if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {
            return $this->json(['message' => 'Missing required fields'], 400);
        }

        $user = new User();
        $user->setUsername($data['username']);
        $user->setEmail($data['email']);
        $hashedPassword = $passwordHasher->hashPassword($user, $data['password']);
        $user->setPassword($hashedPassword);
        $user->setRoles($data['roles'] ?? []);

        $repository->save($user);

        return $this->json($user, 201);
    }

    #[Route('/api/v1/users/{id}', methods: ['PUT'])]
    #[OA\RequestBody(
        description: 'User data to update',
        required: true,
        content: new OA\JsonContent(
            properties: [
                new OA\Property(property: 'username', type: 'string', nullable: true),
                new OA\Property(property: 'email', type: 'string', nullable: true),
                new OA\Property(property: 'password', type: 'string', nullable: true),
                new OA\Property(property: 'roles', type: 'array', items: new OA\Items(type: 'string'), nullable: true),
            ]
        )
    )]
    #[OA\Response(response: 200, description: 'User updated')]
    #[OA\Response(response: 404, description: 'User not found')]
    #[OA\Tag(name: 'Users')]
    #[Security(name: 'Bearer')]
    public function update(
        int $id,
        Request $request,
        UserRepository $repository,
        UserPasswordHasherInterface $passwordHasher
    ) {
        $user = $repository->findOneById($id);

        if (!$user) {
            return $this->json(['message' => 'User not found'], 404);
        }

        $data = json_decode($request->getContent(), true);

        if (isset($data['username'])) {
            $user->setUsername($data['username']);
        }

        if (isset($data['email'])) {
            $user->setEmail($data['email']);
        }

        if (!empty($data['password'])) {
            $hashedPassword = $passwordHasher->hashPassword($user, $data['password']);
            $user->setPassword($hashedPassword);
        }

        if (isset($data['roles']) && is_array($data['roles'])) {
            $user->setRoles($data['roles']);
        }

        $repository->save($user);

        return $this->json($user);
    }

    #[Route('/api/v1/users/{id}', methods: ['DELETE'])]
    #[OA\Response(response: 204, description: 'User deleted')]
    #[OA\Response(response: 404, description: 'User not found')]
    #[OA\Tag(name: 'Users')]
    #[Security(name: 'Bearer')]
    public function delete(int $id, UserRepository $repository)
    {
        $user = $repository->findOneById($id);

        if (!$user) {
            return $this->json(['message' => 'User not found'], 404);
        }

        $repository->remove($user);

        return $this->json(null, 204);
    }

    // $editorName = $request->request->get('editor[name]');
        // $editorId = $request->request->get('editor[id]');
        // $editorCountry = $request->request->get('editor[country]');

        // if (empty($editorName)) {
        //     return new JsonResponse([
        //         'status' => 'error',
        //         'message' => 'Editor name is required'
        //     ], Response::HTTP_BAD_REQUEST);
        // }

        // $editor = new Editor();
        // $editor->setId($editorId);
        // $editor->setName($editorName);
        // $editor->setCountry($editorCountry);

    -------------------------------------------------------------------------------------------------------------MailerService

    <?php 

namespace App\Service; 

use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;
use Symfony\Component\Mailer\MailerInterface;
use App\Repository\VideoGameRepository; 
use Symfony\Component\Mime\Email;
use Symfony\Component\Security\Http\ParameterBagUtils;
use Twig\Environment;

class MailerService
{
    private MailerInterface $mailer; 
    private Environment $twig;
    private VideoGameRepository $video_game_repository;
    private ParameterBagInterface $params;

    public function __construct(MailerInterface $mailer, Environment $twig, VideoGameRepository $video_game_repository, ParameterBagInterface $params)
    {
        $this->mailer = $mailer; 
        $this->twig = $twig; 
        $this->video_game_repository = $video_game_repository; 
        $this->params = $params;
    }

    // public function sendEmail(string $to, string $subject, string $content,string $template): void
    // {
    //     $videoGames = $this->video_game_repository->findBy([], ['releaseDate' => 'DESC'], 5);
    //     $html = $this->twig->render($template, [
    //         'videoGames' => $videoGames
    //     ]);

        
    //     $email = (new Email())
    //         ->from('newsletter@playcore.com')
    //         ->to($to)
    //         ->subject($subject)
    //         ->text($content)
    //         ->html($html);

    //     $this->mailer->send($email);
    // }

    public function sendEmail(
        string $to,
        string $subject,
        string $content,
        string $template,
        array $templateData = []
    ): void {
        $email = (new Email())
            ->from('newsletter@playcore.com')
            ->to($to)
            ->subject($subject)
            ->text($content);

        // Si des jeux sont nÃ©cessaires dans le template (ex: newsletter)
        if (strpos($template, 'newsletter') !== false) {
            $videoGames = $this->video_game_repository->findBy([], ['releaseDate' => 'DESC'], 7);

            $coverImageDir = $this->params->get('cover_image_directory');
            $imagesCid = [];

            foreach ($videoGames as $videoGame) {
                $imageFilename = $videoGame->getCoverImage();
                $imagePath = $coverImageDir . DIRECTORY_SEPARATOR . $imageFilename;

                if (file_exists($imagePath)) {
                    
                    $cid = uniqid('vg_', true);
                    $email->embedFromPath($imagePath, $cid);
                    $imagesCid[$videoGame->getId()] = $cid;
                } else {
                    $imagesCid[$videoGame->getId()] = null;
                }
            }

            $templateData['videoGames'] = $videoGames;
            $templateData['imagesCid'] = $imagesCid;
        }

        $html = $this->twig->render($template, $templateData);
        $email->html($html);
        
        $this->mailer->send($email);
    }
}